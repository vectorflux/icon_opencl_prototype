# 7= L2, L3 miss
# 47=L1 cache miss
# 102=L2 cache miss
# 127= float oper
# 133= L1 misses
# 137= marked branches
# 138= memory fetch
export HPM_EVENT_SET='7,133,138,137,127'


#-----------------------------------------------------------------------------
export ICON_TESTBED_THREADS=$OMP_NUM_THREADS
#-----------------------------------------------------------------------------
# for PBS change to directory where job was submitted
# (without this job is started in HOME)
if [[ -n ${PBS_O_WORKDIR} ]] ; then
  cd ${PBS_O_WORKDIR}
fi

#-----------------------------------------------------------------------------
# absolute paths of directories
GRID=${basedir}/grids/iconR2B03-grid_spr0.90.nc    # the grid
N=35  # vertcal levels
vertical_coordinates_file_name=${basedir}/vertical_coord_tables/atm_hyb_sz_${N}
WRKDIR=${basedir}/run.t${OMP_NUM_THREADS}
if [ ! -d ${WRKDIR} ]; then
    mkdir -p ${WRKDIR}
fi
cd $WRKDIR
run_commmand="$bindir/icon_testbed"

#=============================================================================
# This section of the run script containes the specifications of the testbed setup.
# The specifications are passed by namelist to the program icon_testbed.
#-----------------------------------------------------------------------------
# ICON testbed namelist parameters
# ------------------------
cat > NAMELIST_ICON_TESTBED << EOF
&parallel_ctl
/
&testbed_ctl
  nproma_set=$nproma_set    ! array blocking starts at 16, by 8, up to 64
  main_iterations=10 ! how many times we will run the tests from the main driver
  run_nh_solver=.true.
/
&io_ctl
 out_expname = '${EXPNAME}' ! file name base
/
&run_ctl
 nlev        = ${N}    ! number of full levels of vertical grid
 i_cell_type = 3            ! triangular cells
 msg_level   = 5            ! level of print detail
 dtime       = 180          ! time step secs
/
&grid_ctl
 patch_file_name = '${GRID}'
 vertical_coordinates_file_name = '${vertical_coordinates_file_name}'
/
&nh_ctl
 nh_dtime = 180         ! nh solver time step secs
 nh_iterations=100
/
&ocean_ctl
/
EOF
#
#=============================================================================
# run the test
# valgrind
${start} ${run_commmand}
check_error $? "${run_commmand}"
#=============================================================================
